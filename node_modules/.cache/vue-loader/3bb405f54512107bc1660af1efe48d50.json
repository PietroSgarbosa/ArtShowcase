{"remainingRequest":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\vue-picture-input\\PictureInput.vue?vue&type=style&index=0&id=431cb064&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\vue-picture-input\\PictureInput.vue","mtime":1570896537334},{"path":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pietro\\Desktop\\Udemy - Estudo pessoal\\GitArt\\ArtShowcase\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.picture-input {\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n}\n.preview-container {\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n  cursor: pointer;\n  overflow: hidden;\n}\n.picture-preview {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 10001;\n  box-sizing: border-box;\n  background-color: rgba(200,200,200,.25);\n}\n.picture-preview.dragging-over {\n  filter: brightness(0.5);\n}\n.picture-inner {\n  position: relative;\n  z-index: 10002;\n  pointer-events: none;\n  box-sizing: border-box;\n  margin: 1em auto;\n  padding: 0.5em;\n  border: .3em dashed rgba(66,66,66,.15);\n  border-radius: 8px;\n  width: calc(100% - 2.5em);\n  height: calc(100% - 2.5em);\n  display: table;\n}\n.picture-inner .picture-inner-text {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  font-size: 2em;\n  line-height: 1.5;\n}\nbutton {\n  margin: 1em .25em;\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\n",{"version":3,"sources":["PictureInput.vue"],"names":[],"mappingsqjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PictureInput.vue","sourceRoot":"node_modules/vue-picture-input","sourcesContent":["<template>\n  <div ref=\"container\" id=\"picture-input\" class=\"picture-input\">\n    <div v-if=\"!supportsUpload\" v-html=\"strings.upload\"></div>\n    <div v-else-if=\"supportsPreview\">\n      <div class=\"preview-container\"\n        :style=\"{maxWidth: previewWidth + 'px', height: previewHeight + 'px', borderRadius: radius + '%'}\">\n          <canvas ref=\"previewCanvas\"\n            class=\"picture-preview\"\n            :class=\"computedClasses\"\n            @drag.stop.prevent=\"\"\n            @dragover.stop.prevent=\"\"\n            @dragstart.stop.prevent=\"onDragStart\"\n            @dragenter.stop.prevent=\"onDragStart\"\n            @dragend.stop.prevent=\"onDragStop\"\n            @dragleave.stop.prevent=\"onDragStop\"\n            @drop.stop.prevent=\"onFileDrop\"\n            @click.prevent=\"onClick\"\n            :style=\"{height: previewHeight + 'px', zIndex: zIndex + 1 }\">\n          </canvas>\n        <div v-if=\"!imageSelected && !plain\"\n          class=\"picture-inner\"\n            :style=\"{top: -previewHeight + 'px', marginBottom: -previewHeight + 'px', fontSize: fontSize, borderRadius: radius + '%', zIndex: zIndex + 2}\">\n          <span v-if=\"supportsDragAndDrop\" class=\"picture-inner-text\" v-html=\"strings.drag\"></span>\n          <span v-else class=\"picture-inner-text\" v-html=\"strings.tap\"></span>\n        </div>\n      </div>\n      <button v-if=\"imageSelected && !hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.change }}</button>\n      <button v-if=\"imageSelected && removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\">{{ strings.remove }}</button>\n      <button v-if=\"imageSelected && toggleAspectRatio && width !== height\" @click.prevent=\"rotateImage\" :class=\"aspectButtonClass\">{{ strings.aspect }}</button>\n    </div>\n    <div v-else>\n      <button v-if=\"!imageSelected\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.select }}</button>\n      <div v-else>\n        <div v-html=\"strings.selected\"></div>\n        <button v-if=\"!hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.change }}</button>\n        <button v-if=\"removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\">{{ strings.remove }}</button>\n      </div>\n    </div>\n    <input ref=\"fileInput\" type=\"file\" :name=\"name\" :id=\"id\" :accept=\"accept\" @change=\"onFileChange\">\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'picture-input',\n  props: {\n    width: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    height: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    margin: {\n      type: [String, Number],\n      default: 0\n    },\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    size: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: [String, Number],\n      default: null\n    },\n    buttonClass: {\n      type: String,\n      default: 'btn btn-primary button'\n    },\n    removeButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    aspectButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    prefill: {\n      type: [String, File],\n      default: ''\n    },\n    prefillOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    crop: {\n      type: Boolean,\n      default: true\n    },\n    radius: {\n      type: [String, Number],\n      default: 0\n    },\n    removable: {\n      type: Boolean,\n      default: false\n    },\n    hideChangeButton: {\n      type: Boolean,\n      default: false\n    },\n    autoToggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    toggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    changeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 10000\n    },\n    alertOnError: {\n      type: Boolean,\n      default: true\n    },\n    customStrings: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  watch: {\n    prefill () {\n      if (this.prefill) {\n        this.preloadImage(this.prefill, this.prefillOptions)\n      } else {\n        this.removeImage()\n      }\n    }\n  },\n  data () {\n    return {\n      imageSelected: false,\n      previewHeight: 0,\n      previewWidth: 0,\n      draggingOver: false,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      strings: {\n        upload: '<p>Your device does not support file uploading.</p>',\n        drag: 'Drag an image or <br>click here to select a file',\n        tap: 'Tap here to select a photo <br>from your gallery',\n        change: 'Change Photo',\n        aspect: 'Landscape/Portrait',\n        remove: 'Remove Photo',\n        select: 'Select a Photo',\n        selected: '<p>Photo successfully selected!</p>',\n        fileSize: 'The file size exceeds the limit',\n        fileType: 'This file type is not supported.'\n      }\n    }\n  },\n  mounted () {\n    this.updateStrings()\n    if (this.prefill) {\n      this.preloadImage(this.prefill, this.prefillOptions)\n    }\n\n    this.$nextTick(() => {\n      window.addEventListener('resize', this.onResize)\n      this.onResize()\n    })\n    if (this.supportsPreview) {\n      this.pixelRatio = Math.round(window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI)\n      const canvas = this.$refs.previewCanvas\n      if (canvas.getContext) {\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.pixelRatio, this.pixelRatio)\n      }\n    }\n    if (this.accept !== 'image/*') {\n      this.fileTypes = this.accept.split(',')\n      this.fileTypes = this.fileTypes.map(s => s.trim())\n    }\n\n    this.canvasWidth = this.width\n    this.canvasHeight = this.height\n\n    this.$on('error', this.onError)\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.onResize)\n    this.$off('error', this.onError)\n  },\n  methods: {\n    updateStrings () {\n      for (let s in this.customStrings) {\n        if (s in this.strings && typeof this.customStrings[s] === 'string') {\n          this.strings[s] = this.customStrings[s]\n        }\n      }\n    },\n    onClick () {\n      if (!this.imageSelected) {\n        this.selectImage()\n        return\n      }\n\n      if (this.changeOnClick) {\n        this.selectImage()\n      }\n\n      this.$emit('click')\n    },\n    onResize () {\n      this.resizeCanvas()\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n    },\n    onDragStart () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = true\n    },\n    onDragStop () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = false\n    },\n    onFileDrop (e) {\n      this.onDragStop()\n      this.onFileChange(e)\n    },\n    onFileChange (e, prefill) {\n      let files = e.target.files || e.dataTransfer.files\n      if (!files.length) {\n        return\n      }\n      if (files[0].size <= 0 || files[0].size > this.size * 1024 * 1024) {\n        this.$emit('error', {\n          type: 'fileSize',\n          fileSize: files[0].size,\n          fileType: files[0].type,\n          fileName: files[0].name,\n          message: this.strings.fileSize + ' (' + this.size + 'MB)'\n        })\n        return\n      }\n      if (files[0].name === this.fileName && files[0].size === this.fileSize && this.fileModified === files[0].lastModified) {\n        return\n      }\n\n      this.file = files[0]\n      this.fileName = files[0].name\n      this.fileSize = files[0].size\n      this.fileModified = files[0].lastModified\n      this.fileType = files[0].type\n\n      if (this.accept === 'image/*') {\n        if (files[0].type.substr(0, 6) !== 'image/') {\n          return\n        }\n      } else {\n        if (this.fileTypes.indexOf(files[0].type) === -1) {\n          this.$emit('error', {\n            type: 'fileType',\n            fileSize: files[0].size,\n            fileType: files[0].type,\n            fileName: files[0].name,\n            message: this.strings.fileType\n          })\n          return\n        }\n      }\n      this.imageSelected = true\n      this.image = ''\n      if (this.supportsPreview) {\n        this.loadImage(files[0], prefill || false)\n      } else {\n        if (prefill) {\n          this.$emit('prefill')\n        } else {\n          this.$emit('change', this.image)\n        }\n      }\n    },\n    onError (error) {\n      if (this.alertOnError) {\n        alert(error.message)\n      }\n    },\n    loadImage (file, prefill) {\n      this.getEXIFOrientation(file, orientation => {\n        this.setOrientation(orientation)\n        let reader = new FileReader()\n        reader.onload = e => {\n          this.image = e.target.result\n          if (prefill) {\n            this.$emit('prefill')\n          } else {\n            this.$emit('change', this.image)\n          }\n          this.imageObject = new Image()\n          this.imageObject.onload = () => {\n            if (this.autoToggleAspectRatio) {\n              let canvasOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n              let imageOrientation = this.getOrientation(this.imageObject.width, this.imageObject.height)\n              if (canvasOrientation !== imageOrientation) {\n                this.rotateCanvas()\n              }\n            }\n            this.drawImage(this.imageObject)\n          }\n          this.imageObject.src = this.image\n        }\n        reader.readAsDataURL(file)\n      })\n    },\n    drawImage (image) {\n      this.imageWidth = image.width\n      this.imageHeight = image.height\n      this.imageRatio = image.width / image.height\n      let offsetX = 0\n      let offsetY = 0\n      let scaledWidth = this.previewWidth\n      let scaledHeight = this.previewHeight\n      const previewRatio = this.previewWidth / this.previewHeight\n      if (this.crop) {\n        if (this.imageRatio >= previewRatio) {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        } else {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        }\n      } else {\n        if (this.imageRatio >= previewRatio) {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        } else {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        }\n      }\n      const canvas = this.$refs.previewCanvas\n      canvas.style.background = 'none'\n      canvas.width = this.previewWidth * this.pixelRatio\n      canvas.height = this.previewHeight * this.pixelRatio\n      this.context.setTransform(1, 0, 0, 1, 0, 0)\n      this.context.clearRect(0, 0, canvas.width, canvas.height)\n      if (this.rotate) {\n        this.context.translate(offsetX * this.pixelRatio, offsetY * this.pixelRatio)\n        this.context.translate(scaledWidth / 2 * this.pixelRatio, scaledHeight / 2 * this.pixelRatio)\n        this.context.rotate(this.rotate)\n        offsetX = -scaledWidth / 2\n        offsetY = -scaledHeight / 2\n      }\n      this.context.drawImage(image,\n        offsetX * this.pixelRatio,\n        offsetY * this.pixelRatio,\n        scaledWidth * this.pixelRatio,\n        scaledHeight * this.pixelRatio)\n    },\n    selectImage () {\n      this.$refs.fileInput.click()\n    },\n    removeImage () {\n      this.$refs.fileInput.value = ''\n      this.$refs.fileInput.type = ''\n      this.$refs.fileInput.type = 'file'\n      this.fileName = ''\n      this.fileType = ''\n      this.fileSize = 0\n      this.fileModified = 0\n      this.imageSelected = false\n      this.image = ''\n      this.file = null\n      this.imageObject = null\n      this.$refs.previewCanvas.style.backgroundColor = 'rgba(200,200,200,.25)'\n      this.$refs.previewCanvas.width = this.previewWidth * this.pixelRatio\n      this.$emit('remove')\n    },\n    rotateImage () {\n      this.rotateCanvas()\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n\n      let newOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n      this.$emit('aspectratiochange', newOrientation)\n    },\n    resizeCanvas () {\n      let previewRatio = this.canvasWidth / this.canvasHeight\n      let newWidth = this.$refs.container.clientWidth\n      if (!this.toggleAspectRatio && newWidth === this.containerWidth) {\n        return\n      }\n      this.containerWidth = newWidth\n      this.previewWidth = Math.min(this.containerWidth - this.margin * 2, this.canvasWidth)\n      this.previewHeight = this.previewWidth / previewRatio\n    },\n    getOrientation (width, height) {\n      let orientation = 'square'\n\n      if (width > height) {\n        orientation = 'landscape'\n      } else if (width < height) {\n        orientation = 'portrait'\n      }\n\n      return orientation\n    },\n    switchCanvasOrientation () {\n      const canvasWidth = this.canvasWidth\n      const canvasHeight = this.canvasHeight\n\n      this.canvasWidth = canvasHeight\n      this.canvasHeight = canvasWidth\n    },\n    rotateCanvas () {\n      this.switchCanvasOrientation()\n      this.resizeCanvas()\n    },\n    setOrientation (orientation) {\n      this.rotate = false\n      if (orientation === 8) {\n        this.rotate = -Math.PI / 2\n      } else if (orientation === 6) {\n        this.rotate = Math.PI / 2\n      } else if (orientation === 3) {\n        this.rotate = -Math.PI\n      }\n    },\n    getEXIFOrientation (file, callback) {\n      var reader = new FileReader()\n      reader.onload = e => {\n        var view = new DataView(e.target.result)\n        if (view.getUint16(0, false) !== 0xFFD8) {\n          return callback(-2)\n        }\n        var length = view.byteLength\n        var offset = 2\n        while (offset < length) {\n          var marker = view.getUint16(offset, false)\n          offset += 2\n          if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n              return callback(-1)\n            }\n            var little = view.getUint16(offset += 6, false) === 0x4949\n            offset += view.getUint32(offset + 4, little)\n            var tags = view.getUint16(offset, little)\n            offset += 2\n            for (var i = 0; i < tags; i++) {\n              if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                return callback(view.getUint16(offset + (i * 12) + 8, little))\n              }\n            }\n          } else if ((marker & 0xFF00) !== 0xFF00) {\n            break\n          } else {\n            offset += view.getUint16(offset, false)\n          }\n        }\n        return callback(-1)\n      }\n      reader.readAsArrayBuffer(file.slice(0, 65536))\n    },\n    preloadImage (source, options) {\n      // ie 11 support\n      let File = window.File\n      try {\n        new File([], '') // eslint-disable-line\n      } catch (e) {\n        File = class File extends Blob {\n          constructor (chunks, filename, opts = {}) {\n            super(chunks, opts)\n            this.lastModifiedDate = new Date()\n            this.lastModified = +this.lastModifiedDate\n            this.name = filename\n          }\n        }\n      }\n      options = Object.assign({}, options)\n      if (typeof source === 'object') {\n        this.imageSelected = true\n        this.image = ''\n        if (this.supportsPreview) {\n          this.loadImage(source, true)\n        } else {\n          this.$emit('prefill')\n        }\n        return\n      }\n      let headers = new Headers()\n      headers.append('Accept', 'image/*')\n      fetch(source, {\n        method: 'GET',\n        mode: 'cors',\n        headers: headers\n      }).then(response => {\n        return response.blob()\n      })\n      .then(imageBlob => {\n        let e = { target: { files: [] } }\n        const fileName = options.fileName || source.split('/').slice(-1)[0]\n        let mediaType = options.mediaType || ('image/' + (options.fileType || fileName.split('.').slice(-1)[0]))\n        mediaType = mediaType.replace('jpg', 'jpeg')\n        e.target.files[0] = new File([imageBlob], fileName, { type: mediaType })\n        this.onFileChange(e, true)\n      })\n      .catch(err => {\n        this.$emit('error', {\n          type: 'failedPrefill',\n          message: 'Failed loading prefill image: ' + err\n        })\n      })\n    }\n  },\n  computed: {\n    supportsUpload () {\n      if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\\/(1.0|2.0|2.5|3.0))/)) {\n        return false\n      }\n      const el = document.createElement('input')\n      el.type = 'file'\n      return !el.disabled\n    },\n    supportsPreview () {\n      return window.FileReader && !!window.CanvasRenderingContext2D\n    },\n    supportsDragAndDrop () {\n      const div = document.createElement('div')\n      return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && !('ontouchstart' in window || navigator.msMaxTouchPoints)\n    },\n    computedClasses () {\n      const classObject = {}\n      classObject['dragging-over'] = this.draggingOver\n      return classObject\n    },\n    fontSize () {\n      return Math.min(0.04 * this.previewWidth, 21) + 'px'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.picture-input {\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n}\n.preview-container {\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n  cursor: pointer;\n  overflow: hidden;\n}\n.picture-preview {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 10001;\n  box-sizing: border-box;\n  background-color: rgba(200,200,200,.25);\n}\n.picture-preview.dragging-over {\n  filter: brightness(0.5);\n}\n.picture-inner {\n  position: relative;\n  z-index: 10002;\n  pointer-events: none;\n  box-sizing: border-box;\n  margin: 1em auto;\n  padding: 0.5em;\n  border: .3em dashed rgba(66,66,66,.15);\n  border-radius: 8px;\n  width: calc(100% - 2.5em);\n  height: calc(100% - 2.5em);\n  display: table;\n}\n.picture-inner .picture-inner-text {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  font-size: 2em;\n  line-height: 1.5;\n}\nbutton {\n  margin: 1em .25em;\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\n</style>\n"]}]}